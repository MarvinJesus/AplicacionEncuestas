CREATE DATABASE DB_ENCUESTA
GO

USE DB_ENCUESTA
GO

/************* TABLE USER ****************/
/****************************************/
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE
TABLE_NAME = 'TBL_USER'))
BEGIN
	CREATE TABLE TBL_USER(
		USER_ID  UNIQUEIDENTIFIER DEFAULT (NEWID()),
		USERNAME VARCHAR(100) NOT NULL UNIQUE,
		PASSWORD VARBINARY(MAX) NOT NULL,
		SALT VARBINARY(MAX) NOT NULL,
		PRIMARY KEY(USER_ID)
	)
END;



/************ TABLE USER CLAIMS ************/
/******************************************/
IF(NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TBL_USER_CLAIM'))
BEGIN

	CREATE TABLE TBL_USER_CLAIM(
		ID			INT IDENTITY(1,1),
		USER_ID		UNIQUEIDENTIFIER NOT NULL,
		CLAIM_VALUE VARCHAR(30) NOT NULL,
		CLAIM_TYPE	VARCHAR(30) NOT NULL,
		PRIMARY KEY(ID)
	)
END
GO



/************ TABLE PROFILE ************/
/***********************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_PROFILE'))
BEGIN

  CREATE TABLE TBL_PROFILE(
    PROFILE_ID			UNIQUEIDENTIFIER DEFAULT(NEWID()),
	IDENTIFICATION		VARCHAR(15) NOT NULL UNIQUE,
	NAME				VARCHAR(100) NOT NULL,
	EMAIL				VARCHAR(100) NOT NULL UNIQUE,
	IMG_URL				VARCHAR(2083),
	CREATE_DATE			DATETIME NOT NULL,
	ACTIVE				BIT NOT NULL,
	USER_ID				UNIQUEIDENTIFIER DEFAULT(NEWID())
    PRIMARY KEY(PROFILE_ID)
  )

END;



/************ TABLE ROLE ************/
/************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_ROLE'))
BEGIN

  CREATE TABLE TBL_ROLE(
    ROLE_ID			INT NOT NULL IDENTITY(1,1),
	ROLE_NAME		VARCHAR(20) NOT NULL
    PRIMARY KEY(ROLE_ID)
  )

END;



/************ TABLE ROLE BY USER ************/
/************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_ROLE_BY_USER'))
BEGIN

  CREATE TABLE TBL_ROLE_BY_USER(
    ID			INT NOT NULL IDENTITY(1,1),
	ROLE_ID		INT NOT NULL,
	USER_ID		UNIQUEIDENTIFIER DEFAULT(NEWID())
    PRIMARY KEY(ID)
  )
END;



/************ TABLE TOPIC ************/
/************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_TOPIC'))
BEGIN

  CREATE TABLE TBL_TOPIC(
    TOPIC_ID			UNIQUEIDENTIFIER NOT NULL,
	TITLE				VARCHAR(100) NOT NULL,
	TOPIC_DESCRIPTION	VARCHAR(500) NOT NULL,
	IMG_URL				VARCHAR(2083),
	CREATE_DATE			DATE NOT NULL,
	USER_ID				UNIQUEIDENTIFIER DEFAULT(NEWID())
    PRIMARY KEY(TOPIC_ID)
  )

END;



/************ TABLE CATEGORY ************/
/************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_CATEGORY'))
BEGIN

  CREATE TABLE TBL_CATEGORY(
    CATEGORY_ID			INT NOT NULL IDENTITY(1,1),
	CATEGORY_NAME		VARCHAR(30) NOT NULL UNIQUE,
    PRIMARY KEY(CATEGORY_ID)
  )

END;



/************ TABLE TOPIC CATEGORIES ************/
/***********************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_CATEGORY_BY_TOPIC'))
BEGIN

  CREATE TABLE TBL_CATEGORY_BY_TOPIC(
	ID					INT IDENTITY(1,1)NOT NULL,
    CATEGORY_ID			INT NOT NULL,
	TOPIC_ID			UNIQUEIDENTIFIER NOT NULL
    PRIMARY KEY(ID)
  )

END;



/************ TABLE SURVEY ************/
/*************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_SURVEY'))
BEGIN

  CREATE TABLE TBL_SURVEY(
    SURVEY_ID			UNIQUEIDENTIFIER NOT NULL,
	SURVEY_TITLE		VARCHAR(100) NOT NULL,
	SURVEY_DESCRIPTION	VARCHAR(500) NOT NULL,
	IMG_URL				VARCHAR(2083) NOT NULL,
	TOPIC_ID			UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY(SURVEY_ID)
  )

END;



/************ TABLE QUESTION ************/
/***************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_QUESTION'))
BEGIN

  CREATE TABLE TBL_QUESTION(
    QUESTION_ID				INT NOT NULL IDENTITY(1,1),
	QUESTION_DESCRIPTION	VARCHAR(500) NOT NULL,
	SURVEY_ID				UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY(QUESTION_ID)
  )

END;



/************ TABLE ANSWER ************/
/*************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_ANSWER'))
BEGIN

  CREATE TABLE TBL_ANSWER(
    ANSWER_ID			INT NOT NULL IDENTITY(1,1),
	ANSWER_DESCRIPTION	VARCHAR(500) NOT NULL,
	QUESTION_ID				INT NOT NULL,
    PRIMARY KEY(ANSWER_ID)
  )

END;



/************ TABLE EXCEPTION ************/
/****************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_EXCEPTION'))
BEGIN

  CREATE TABLE TBL_EXCEPTION(
    EXCEPTION_ID		INT NOT NULL IDENTITY(1,1),
	CODE				INT NOT NULL UNIQUE,
	MESSAGE				VARCHAR(500) NOT NULL,
    PRIMARY KEY(EXCEPTION_ID)
  )

END;



/************ TABLE UNCONTROLLED EXCEPTION ************/
/*****************************************************/
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE 
TABLE_NAME = 'TBL_UNCONTROLLED_EXCEPTION'))
BEGIN

  CREATE TABLE TBL_UNCONTROLLED_EXCEPTION(
    UNCONTROLLED_EXCEPTION_ID	INT NOT NULL IDENTITY(1,1),
	MESSAGE						VARCHAR(500) NOT NULL,
	EXC_HOUR					TIME NOT NULL,
	EXC_DAY						DATE NOT NULL,
	STACK_TRACE					VARCHAR(MAX),
    PRIMARY KEY(UNCONTROLLED_EXCEPTION_ID)
  )
END;




/********************************************************************/
/**************************FOREIGN KEYS*****************************/
/******************************************************************/

/*----------------------------------------------------------------
				FOREIGN KEYS THE PROFILE TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_PROFILE ADD FOREIGN KEY (USER_ID)
REFERENCES TBL_USER(USER_ID) ON UPDATE CASCADE



/*----------------------------------------------------------------
				FOREIGN KEYS THE ROL BY USER TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_ROLE_BY_USER ADD FOREIGN KEY (ROLE_ID)
REFERENCES TBL_ROLE(ROLE_ID)ON UPDATE CASCADE

ALTER TABLE TBL_ROLE_BY_USER ADD FOREIGN KEY (USER_ID)
REFERENCES TBL_USER(USER_ID)ON UPDATE CASCADE ON DELETE CASCADE



/*----------------------------------------------------------------
				FOREIGN KEYS THE TOPIC TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_TOPIC ADD FOREIGN KEY (USER_ID)
REFERENCES TBL_USER(USER_ID) ON UPDATE CASCADE



/*----------------------------------------------------------------
				FOREIGN KEYS THE SURVEY TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_SURVEY ADD FOREIGN KEY (TOPIC_ID)
REFERENCES TBL_TOPIC(TOPIC_ID) ON UPDATE CASCADE ON DELETE CASCADE



/*----------------------------------------------------------------
				FOREIGN KEYS THE QUESTION TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_QUESTION ADD FOREIGN KEY (SURVEY_ID)
REFERENCES TBL_SURVEY(SURVEY_ID) ON UPDATE CASCADE ON DELETE CASCADE



/*----------------------------------------------------------------
				FOREIGN KEYS THE ANSWER TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_ANSWER ADD FOREIGN KEY (QUESTION_ID)
REFERENCES TBL_QUESTION(QUESTION_ID) ON UPDATE CASCADE ON DELETE CASCADE



/*----------------------------------------------------------------
				FOREIGN KEYS THE CATEGORY BY TOPIC TABLE
-------------------------------------------------------------------*/
ALTER TABLE TBL_CATEGORY_BY_TOPIC ADD FOREIGN KEY (CATEGORY_ID)
REFERENCES TBL_CATEGORY(CATEGORY_ID) ON UPDATE CASCADE

ALTER TABLE TBL_CATEGORY_BY_TOPIC ADD FOREIGN KEY (TOPIC_ID)
REFERENCES TBL_TOPIC(TOPIC_ID) ON UPDATE CASCADE



/****************************************************************************/
/****************************REQUIRED RECORDS*******************************/
/**************************************************************************/
INSERT INTO TBL_ROLE VALUES('ADMIN');
INSERT INTO TBL_ROLE VALUES('STANDARD_USER');
INSERT INTO TBL_ROLE VALUES('MANAGER')

INSERT INTO TBL_EXCEPTION VALUES(1,'Upps algo fallo!');
INSERT INTO TBL_EXCEPTION VALUES(2,'Por favor completar los campos requeridos');
INSERT INTO TBL_EXCEPTION VALUES(3,'Por favor ingrese un correo o numero de cedula diferente, ya se encuentran registrado');
INSERT INTO TBL_EXCEPTION VALUES(4,'El usuario no existe');
INSERT INTO TBL_EXCEPTION VALUES(5,'La pregunta no existe');
INSERT INTO TBL_EXCEPTION VALUES(6,'El tema no existe');
INSERT INTO TBL_EXCEPTION VALUES(7,'Algunas categorias no pudieron ser registradas')
INSERT INTO TBL_EXCEPTION VALUES(8,'Tuvimos problemas registando:')

INSERT INTO TBL_CATEGORY VALUES('Medicina');
INSERT INTO TBL_CATEGORY VALUES('Cocina');
INSERT INTO TBL_CATEGORY VALUES('Veterinaria');
INSERT INTO TBL_CATEGORY VALUES('Tecnología');
INSERT INTO TBL_CATEGORY VALUES('Deporte');
INSERT INTO TBL_CATEGORY VALUES('Baile');
INSERT INTO TBL_CATEGORY VALUES('Salud');
INSERT INTO TBL_CATEGORY VALUES('Ciencia');
INSERT INTO TBL_CATEGORY VALUES('Economia');

SELECT * FROM TBL_USER
SELECT * FROM TBL_PROFILE
SELECT * FROM TBL_USER_CLAIM
SELECT * FROM TBL_TOPIC
SELECT * FROM TBL_SURVEY
SELECT * FROM TBL_QUESTION
SELECT * FROM TBL_ANSWER
SELECT *  FROM TBL_UNCONTROLLED_EXCEPTION
SELECT * FROM TBL_CATEGORY ORDER BY CATEGORY_ID

DELETE
FROM TBL_SURVEY
WHERE SURVEY_ID = '796B3B5B-13E1-48B9-B3FD-ED12E44B8158'
